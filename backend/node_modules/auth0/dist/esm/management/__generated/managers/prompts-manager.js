import * as runtime from '../../../lib/runtime.js';
const { BaseAPI } = runtime;
/**
 *
 */
export class PromptsManager extends BaseAPI {
    /**
     * Retrieve custom text for a specific prompt and language.
     * Get custom text for a prompt
     *
     * @throws {RequiredError}
     */
    async getCustomTextByLanguage(requestParameters, initOverrides) {
        runtime.validateRequiredRequestParams(requestParameters, ['prompt', 'language']);
        const response = await this.request({
            path: `/prompts/{prompt}/custom-text/{language}`
                .replace('{prompt}', encodeURIComponent(String(requestParameters.prompt)))
                .replace('{language}', encodeURIComponent(String(requestParameters.language))),
            method: 'GET',
        }, initOverrides);
        return runtime.JSONApiResponse.fromResponse(response);
    }
    /**
     * Retrieve prompts settings.
     * Get prompts settings
     *
     * @throws {RequiredError}
     */
    async get(initOverrides) {
        const response = await this.request({
            path: `/prompts`,
            method: 'GET',
        }, initOverrides);
        return runtime.JSONApiResponse.fromResponse(response);
    }
    /**
     * Update prompts settings.
     * Update prompts settings
     *
     * @throws {RequiredError}
     */
    async update(bodyParameters, initOverrides) {
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/prompts`,
            method: 'PATCH',
            headers: headerParameters,
            body: bodyParameters,
        }, initOverrides);
        return runtime.JSONApiResponse.fromResponse(response);
    }
    /**
     * Set custom text for a specific prompt. Existing texts will be overwritten.
     * Set custom text for a specific prompt
     *
     * @throws {RequiredError}
     */
    async updateCustomTextByLanguage(requestParameters, bodyParameters, initOverrides) {
        runtime.validateRequiredRequestParams(requestParameters, ['prompt', 'language']);
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/prompts/{prompt}/custom-text/{language}`
                .replace('{prompt}', encodeURIComponent(String(requestParameters.prompt)))
                .replace('{language}', encodeURIComponent(String(requestParameters.language))),
            method: 'PUT',
            headers: headerParameters,
            body: bodyParameters,
        }, initOverrides);
        return runtime.VoidApiResponse.fromResponse(response);
    }
}
//# sourceMappingURL=prompts-manager.js.map